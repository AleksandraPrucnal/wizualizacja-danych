import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt
import pandas as pd
 
# cw1
students = np.array(
    [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31,
     32, 33, 34, 35, 36, 37, 38, 39, 40])
height = np.array(
    [153, 154, 154, 155, 158, 159, 160, 161, 163, 164, 165, 165, 165, 166, 167, 167, 168, 168, 170, 170, 170, 171, 173,
     174, 174, 174, 175, 175, 176, 177, 178, 178, 178, 179, 179, 179, 180, 180, 183, 185])
shoe_size = np.array(
    [5, 6, 6, 6, 5, 7, 6, 5, 6, 7, 7, 6, 7, 10, 9.5, 10, 10, 9, 10.5, 9.5, 8.5, 9, 10, 8, 10, 9, 12, 11, 9, 10, 11, 11,
     12, 10.5, 11.5, 11, 13, 12, 12.5, 13])
 
sredni_but = np.mean(shoe_size)
max_r_buta = np.max(shoe_size)
srednia_z_max_r_buta = height[shoe_size == max_r_buta].mean()
min_wzros_z_max_r_buta = np.min(height[shoe_size == max_r_buta])
sredni_r_buta = np.mean(sredni_but)
unikalne_wzrosty = np.unique(height)
for i in unikalne_wzrosty:
    sredni_r_buta = np.mean(shoe_size[i == height])
    print(f"{i}: {sredni_r_buta}")
sredni_wzrost = np.mean(height)
min_wzrost = np.min(height[shoe_size==10])
max_wzrost = np.max(height[shoe_size==10])
european_shoe_size = (shoe_size * 1.5) + 33
 
# cw2
x = np.linspace(-2,2,25)
sns.scatterplot(x)
sns.scatterplot(x**2)
plt.gca().set_facecolor('black')
plt.gcf().set_facecolor('black')
plt.gca().spines['bottom'].set_color('white')
plt.gca().spines['left'].set_color('white')
plt.gca().spines['top'].set_color('white')
plt.gca().spines['right'].set_color('white')
plt.gca().tick_params(axis='x', color='white')
plt.gca().tick_params(axis='y', color='white')
plt.xticks(color='white')
plt.yticks(color='white')
plt.grid(False)
plt.show()

x = np.linspace(0, 4, 500)
y1 = x ** 2
y2 = np.exp(x)
y3 = x ** x

fig, (ax0, ax1, ax2) = plt.subplots(3, 1)
ax0.plot(x, y1, 'g--', label='x^2 (zielony przerywany)')
ax1.plot(x, y2, 'r:', label='exp(x) (czerwony kropkowany)')
ax2.plot(x, y3, 'b-', label='x^x (niebieski ciągły)')

fig.legend(title='Opisy wykresów', loc='center', bbox_to_anchor=(0.5, 0.05), ncol=3)

fig.suptitle('Wykresy funkcji', fontsize=14)

plt.tight_layout()
plt.show()
 
# cw3
data = pd.read_csv('wyniki.csv', delimiter=";", encoding="utf-8")
ilość_kart = data["Komisje obwodowe otrzymały kart do głosowania"].sum()
data["Procent kopert bez oświadczenia"] = (data["Liczba kopert zwrotnych, w których nie było oświadczenia o osobistym i tajnym oddaniu głosu"] / data["Liczba otrzymanych kopert zwrotnych"]) * 100
plt.bar(data['Województwo'], data["Procent kopert bez oświadczenia"])
plt.xticks(rotation=90)
plt.show()
 
kandydaci = ["Robert BIEDROŃ", "Krzysztof BOSAK", "Andrzej Sebastian DUDA", "Szymon Franciszek HOŁOWNIA", "Marek JAKUBIAK",
             "Władysław Marcin KOSINIAK-KAMYSZ", "Mirosław Mariusz PIOTROWSKI", "Paweł Jan TANAJNO", "Rafał Kazimierz TRZASKOWSKI",
             "Waldemar Włodzimierz WITKOWSKI", "Stanisław Józef ŻÓŁTEK"]
suma_glosow = pd.DataFrame(data[kandydaci].sum()).T
suma_glosow.plot(kind="bar")
plt.show()
